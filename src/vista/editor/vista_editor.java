/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.editor;

import java.awt.AWTKeyStroke;
import java.awt.Event;
import java.awt.datatransfer.Clipboard;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.awt.FileDialog;
import java.awt.TextArea;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.TextEvent;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.StringReader;
import java.io.FileWriter;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;
import javax.swing.text.Caret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.JTextComponent;

/**
 *
 * @author javier
 */
public class vista_editor extends javax.swing.JFrame {

   String programName = "Bloc de Notas";
   String filename = "";
   String holdText;
   String fn;
   String dir;
   String textoCopiado = "";
   boolean textChanged = false;
   String fileName;
   Clipboard clip = getToolkit().getSystemClipboard();
   JFileChooser filechooser;
   File archivo;
    private Object acciones;
    public vista_editor() {
        initComponents();
        
    }
    public void verificar()
    {
     BufferedReader read;
     StringBuffer sb = new StringBuffer();
     try {
      read = new BufferedReader(new FileReader(filename));
      String line;
      while ((line = read.readLine()) != null) {
              sb.append(line + "\n");
      }
      areaText.setText(sb.toString());
      read.close(); }
     catch (FileNotFoundException e){
       JOptionPane.showMessageDialog(null, "Archivo de texto no encontrado");
     } catch (IOException ioe){
     }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        areaText = new java.awt.TextArea();
        BarraTx = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        nuevoMenu = new javax.swing.JMenuItem();
        abrirMenu = new javax.swing.JMenuItem();
        guardarMenu = new javax.swing.JMenuItem();
        gcomoMenu = new javax.swing.JMenuItem();
        salirMenu = new javax.swing.JMenuItem();
        Editar = new javax.swing.JMenu();
        cortarTx = new javax.swing.JMenuItem();
        copiarTx = new javax.swing.JMenuItem();
        pegarTx = new javax.swing.JMenuItem();
        selectTx = new javax.swing.JMenuItem();
        borrarTx = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Editor de Texto JM 61");
        setIconImage(new ImageIcon(getClass().getResource("/icono/jm.png")).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        areaText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        areaText.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                areaTextTextValueChanged(evt);
            }
        });

        BarraTx.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        Archivo.setText("Archivo");

        nuevoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nuevoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/archivo-1.png"))); // NOI18N
        nuevoMenu.setText("Nuevo");
        nuevoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoMenuActionPerformed(evt);
            }
        });
        Archivo.add(nuevoMenu);

        abrirMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        abrirMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/carpeta.png"))); // NOI18N
        abrirMenu.setText("Abrir");
        abrirMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMenuActionPerformed(evt);
            }
        });
        Archivo.add(abrirMenu);

        guardarMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        guardarMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/guardar.png"))); // NOI18N
        guardarMenu.setText("Guardar");
        guardarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarMenuActionPerformed(evt);
            }
        });
        Archivo.add(guardarMenu);

        gcomoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        gcomoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/guardar-1.png"))); // NOI18N
        gcomoMenu.setText("Guardar Como...");
        gcomoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gcomoMenuActionPerformed(evt);
            }
        });
        Archivo.add(gcomoMenu);

        salirMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        salirMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/cerrar.png"))); // NOI18N
        salirMenu.setText("Salir");
        salirMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirMenuActionPerformed(evt);
            }
        });
        Archivo.add(salirMenu);

        BarraTx.add(Archivo);

        Editar.setText("Editar");
        Editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarActionPerformed(evt);
            }
        });

        cortarTx.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cortarTx.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/tijeras.png"))); // NOI18N
        cortarTx.setText("Cortar");
        cortarTx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cortarTxActionPerformed(evt);
            }
        });
        Editar.add(cortarTx);

        copiarTx.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copiarTx.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/copia.png"))); // NOI18N
        copiarTx.setText("Copiar");
        copiarTx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiarTxActionPerformed(evt);
            }
        });
        Editar.add(copiarTx);

        pegarTx.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pegarTx.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/pegar.png"))); // NOI18N
        pegarTx.setText("Pegar");
        pegarTx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pegarTxActionPerformed(evt);
            }
        });
        Editar.add(pegarTx);

        selectTx.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        selectTx.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/Selecionar todo.png"))); // NOI18N
        selectTx.setText("Seleccionar Todo");
        selectTx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTxActionPerformed(evt);
            }
        });
        Editar.add(selectTx);

        borrarTx.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        borrarTx.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/goma-de-borrar.png"))); // NOI18N
        borrarTx.setText("Borrar Todo");
        borrarTx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarTxActionPerformed(evt);
            }
        });
        Editar.add(borrarTx);

        BarraTx.add(Editar);

        setJMenuBar(BarraTx);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(areaText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .add(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarMenuActionPerformed
        // TODO add your handling code here:
        if(filename.equals(""))
            saveAs();
        else
            save(filename);
    }//GEN-LAST:event_guardarMenuActionPerformed

    private void gcomoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gcomoMenuActionPerformed
        // TODO add your handling code here:
        saveAs();
    }//GEN-LAST:event_gcomoMenuActionPerformed

    private void salirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirMenuActionPerformed
        // TODO add your handling code here:
               if("".equals(areaText.getText())){
         System.exit(0);
        }
        else if (!textChanged){
         System.exit(0);
        }
        else{
         int confirm = JOptionPane.showConfirmDialog(null, "Quieres guardar los cambios antes de salir?");
         if (confirm==JOptionPane.YES_OPTION)
         {
           if("".equals(filename))
           saveAs();
           
           else
            save(filename);
            System.exit(0);
         }  
           if (confirm==JOptionPane.NO_OPTION)
         { 
             System.exit(0);
         }
        }
    }//GEN-LAST:event_salirMenuActionPerformed

    private void nuevoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoMenuActionPerformed
        // TODO add your handling code here:
        newFile();
    }//GEN-LAST:event_nuevoMenuActionPerformed

    private void areaTextTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_areaTextTextValueChanged
        // TODO add your handling code here:
        if (TextEvent.TEXT_VALUE_CHANGED!=0)
        {
          if (!textChanged)
               setTitle("* "+getTitle());
          textChanged=true;
          guardarMenu.setEnabled(true);
        }
    }//GEN-LAST:event_areaTextTextValueChanged

    private void abrirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMenuActionPerformed
        // TODO add your handling code here:
       filechooser = new JFileChooser();
       int returnVal = filechooser.showOpenDialog(this);
       if (returnVal == JFileChooser.APPROVE_OPTION)
       {
         archivo = filechooser.getSelectedFile();
         try
         {
          areaText.setText(null);
          BufferedReader br = new BufferedReader(new FileReader(archivo));
          String cadena;
          while ((cadena = br.readLine()) != null)
          {
           areaText.append(cadena +"\n");
          }
         }
         catch (IOException ex)
         {
          JOptionPane.showMessageDialog(null, "Texto no encontrado");
         }
       }
         else 
         { 
           JOptionPane.showMessageDialog(null, "Cancelado por usuario.");
         }
    }//GEN-LAST:event_abrirMenuActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
               if("".equals(areaText.getText())){
         System.exit(0);
        }
        else if (!textChanged){
         System.exit(0);
        }
        else{
         int confirm = JOptionPane.showConfirmDialog(null, "Quieres guardar los cambios antes de salir?");
         if (confirm==JOptionPane.YES_OPTION)
         {
           if("".equals(filename))
           saveAs();
           
           else
            save(filename);
            System.exit(0);
         }  
           if (confirm==JOptionPane.NO_OPTION)
         { 
             System.exit(0);
         }
        }
    }//GEN-LAST:event_formWindowClosing

    private void EditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EditarActionPerformed

    private void copiarTxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiarTxActionPerformed
     copiar();
                
    }//GEN-LAST:event_copiarTxActionPerformed

    private void cortarTxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cortarTxActionPerformed
      cortar();
    
    }//GEN-LAST:event_cortarTxActionPerformed

    private void selectTxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTxActionPerformed
    areaText.selectAll();    
    }//GEN-LAST:event_selectTxActionPerformed

    private void borrarTxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarTxActionPerformed
    areaText.setText(" ");
    }//GEN-LAST:event_borrarTxActionPerformed

    private void pegarTxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pegarTxActionPerformed
    pegar();
    }//GEN-LAST:event_pegarTxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vista_editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vista_editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vista_editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vista_editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vista_editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Archivo;
    private javax.swing.JMenuBar BarraTx;
    private javax.swing.JMenu Editar;
    private javax.swing.JMenuItem abrirMenu;
    private java.awt.TextArea areaText;
    private javax.swing.JMenuItem borrarTx;
    private javax.swing.JMenuItem copiarTx;
    private javax.swing.JMenuItem cortarTx;
    private javax.swing.JMenuItem gcomoMenu;
    private javax.swing.JMenuItem guardarMenu;
    private javax.swing.JMenuItem nuevoMenu;
    private javax.swing.JMenuItem pegarTx;
    private javax.swing.JMenuItem salirMenu;
    private javax.swing.JMenuItem selectTx;
    // End of variables declaration//GEN-END:variables

    private void saveAs() {
        FileDialog fd = new FileDialog(vista_editor.this, "Guardar", FileDialog.SAVE);
        fd.show();
        if (fd.getFile() != null) {
        
         fn =fd.getFile();
         dir=fd.getDirectory();
         filename = dir + fn +".txt";
         
         setTitle(filename);
         try
         {
          DataOutputStream d = new DataOutputStream(new FileOutputStream(filename));
          holdText = areaText.getText();
          BufferedReader br = new BufferedReader(new StringReader(holdText));
          while ((holdText = br.readLine()) != null){
           d.writeBytes(holdText + "\r\n");
           d.close();}
          }
         catch (Exception e)
         {
          JOptionPane.showMessageDialog(null, "Texto no encontrado");
         }
         areaText.requestFocus();
         save(filename);
         }
        }

    private void save(String filename) {
        setTitle(programName+" "+filename);
        try
        {
         FileWriter out;
          out = new FileWriter(fn);
          out.write(areaText.getText());
          out.close();
        }
        catch(Exception err){
        JOptionPane.showMessageDialog(null, "Error+ "+err);
        }
        textChanged=false;
        guardarMenu.setEnabled(false);
    }

    private void newFile() 
    {
        if(areaText.getText().length() < 1){
            setTitle("Untitled-"+programName);
            areaText.setText("");
            textChanged=false;
        }
        else if(!textChanged){
         setTitle("Untitled-"+programName);
         areaText.setText("");
         textChanged=false;
        }
        else{
         int confirm = JOptionPane.showConfirmDialog(null, "Deseas comenzar un nuevo texto");
         if (confirm==JOptionPane.YES_OPTION)
         {
           if("".equals(filename))
           saveAs();
           
           else
            save(filename);
           
           setTitle(programName);
           filename="";
           areaText.setText("");
           textChanged=false;
                    }
        }
    } 
   public void cortar(){
        int inicio = areaText.getSelectionStart();
        int fin = areaText.getSelectionEnd();
        String s = areaText.getText();
        textoCopiado = s.substring( inicio , fin );
        String inicioText = areaText.getText().substring(0, inicio);
        String finText = areaText.getText().substring(fin, areaText.getText().length());
        areaText.setText(inicioText+finText);   
    }
   public void copiar(){
        int inicio= areaText.getSelectionStart();
        int fin = areaText.getSelectionEnd();
        String s = areaText.getText();
        textoCopiado = s.substring( inicio , fin );       
    }
    public void pegar(){
       
        int inicio = areaText.getSelectionStart();
        String inicioText = areaText.getText().substring(0, inicio);
        String finText = areaText.getText().substring(inicio);
        String res = inicioText+textoCopiado+finText;
        areaText.setText(res);
        }
       
}

    


